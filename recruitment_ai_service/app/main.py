# Import FastAPI framework ƒë·ªÉ t·∫°o REST API
from fastapi import FastAPI

# Import middleware CORS (Cross-Origin Resource Sharing)
# D√πng ƒë·ªÉ cho ph√©p client (nh∆∞ React, Vue, Angular...) g·ªçi API t·ª´ domain kh√°c
from fastapi.middleware.cors import CORSMiddleware

# Import logging ƒë·ªÉ ghi log trong su·ªët qu√° tr√¨nh ch·∫°y
import logging

# Import c√°c route (API endpoint) ri√™ng cho t·ª´ng module
from app.api.routes import cv_parser, matching

# Import c·∫•u h√¨nh t·ª´ file config (ch·ª©a API key, port, t√™n app,...)
from app.core.config import settings

# Import service k·∫øt n·ªëi v·ªõi Pinecone (Vector Database)
from app.services.vector_service import VectorService


# ---------------------------------------
# üßæ C·∫§U H√åNH LOGGING TO√ÄN H·ªÜ TH·ªêNG
# ---------------------------------------
# Ghi log ·ªü m·ª©c ƒë·ªô INFO (ghi ra c√°c s·ª± ki·ªán th√¥ng th∆∞·ªùng, kh√¥ng ph·∫£i l·ªói)
logging.basicConfig(level=logging.INFO)
# T·∫°o logger cho file n√†y, gi√∫p ph√¢n bi·ªát log gi·ªØa c√°c module kh√°c nhau
logger = logging.getLogger(__name__)


# ---------------------------------------
# üöÄ KH·ªûI T·∫†O FASTAPI APP
# ---------------------------------------
app = FastAPI(
    title=settings.app_name,  # T√™n ·ª©ng d·ª•ng (l·∫•y t·ª´ file .env ho·∫∑c config)
    version=settings.api_version,  # Phi√™n b·∫£n API
    description="AI-powered CV parsing and job matching service"  # M√¥ t·∫£ ng·∫Øn
)


# ---------------------------------------
# üåç TH√äM MIDDLEWARE CORS
# ---------------------------------------
# D√πng ƒë·ªÉ cho ph√©p request t·ª´ c√°c domain kh√°c (frontend c√≥ th·ªÉ ch·∫°y ·ªü localhost:3000)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Cho ph√©p t·∫•t c·∫£ domain (‚ö†Ô∏è n√™n gi·ªõi h·∫°n khi l√™n production)
    allow_credentials=True,  # Cho ph√©p g·ª≠i cookie/headers x√°c th·ª±c
    allow_methods=["*"],  # Cho ph√©p t·∫•t c·∫£ HTTP methods (GET, POST, PUT, DELETE,...)
    allow_headers=["*"],  # Cho ph√©p t·∫•t c·∫£ headers
)


# ---------------------------------------
# üß© ƒêƒÇNG K√ù ROUTER CHO API
# ---------------------------------------
# K·∫øt n·ªëi router t·ª´ c√°c module ri√™ng bi·ªát
# - cv_parser: X·ª≠ l√Ω tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ CV
# - matching: X·ª≠ l√Ω so kh·ªõp CV v√† Job Description
app.include_router(cv_parser.router, prefix="/api/v1", tags=["CV Processing"])
app.include_router(matching.router, prefix="/api/v1", tags=["Job Matching"])


# ---------------------------------------
# ‚öôÔ∏è S·ª∞ KI·ªÜN KHI ·ª®NG D·ª§NG KH·ªûI ƒê·ªòNG
# ---------------------------------------
@app.on_event("startup")
async def startup_event():
    """H√†m n√†y s·∫Ω ch·∫°y 1 l·∫ßn khi ·ª©ng d·ª•ng b·∫Øt ƒë·∫ßu kh·ªüi ƒë·ªông"""
    try:
        # Kh·ªüi t·∫°o VectorService ƒë·ªÉ k·∫øt n·ªëi v·ªõi Pinecone
        vector_service = VectorService()
        # Ki·ªÉm tra n·∫øu index ch∆∞a t·ªìn t·∫°i th√¨ t·∫°o m·ªõi
        vector_service.create_index_if_not_exists()
        logger.info("Application started successfully ‚úÖ")
    except Exception as e:
        # Ghi log l·ªói n·∫øu kh·ªüi t·∫°o th·∫•t b·∫°i
        logger.error(f"Error during startup: {str(e)}")


# ---------------------------------------
# üìç ROUTE G·ªêC "/" ‚Äî D√ôNG KI·ªÇM TRA TR·∫†NG TH√ÅI APP
# ---------------------------------------
@app.get("/")
async def root():
    """Tr·∫£ v·ªÅ th√¥ng tin c∆° b·∫£n c·ªßa service"""
    return {
        "message": "CV Matching AI Service",  # T√™n service hi·ªÉn th·ªã
        "version": settings.api_version,       # Phi√™n b·∫£n API
        "status": "running"                    # Tr·∫°ng th√°i hi·ªán t·∫°i
    }


# ---------------------------------------
# üíì ROUTE /health ‚Äî D√ôNG CHO HEALTH CHECK
# ---------------------------------------
@app.get("/health")
async def health_check():
    """Endpoint d√πng ƒë·ªÉ ki·ªÉm tra t√¨nh tr·∫°ng h·ªá th·ªëng (health check)"""
    return {"status": "healthy"}


# ---------------------------------------
# üèÅ CH·∫†Y ·ª®NG D·ª§NG B·∫∞NG UVICORN
# ---------------------------------------
if __name__ == "__main__":
    import uvicorn
    # uvicorn l√† web server ch·∫°y FastAPI
    # host="0.0.0.0" cho ph√©p truy c·∫≠p t·ª´ b√™n ngo√†i (tr√™n cloud)
    # port=8000 l√† c·ªïng ch·∫°y API (VD: http://localhost:8000)
    uvicorn.run(app, host="0.0.0.0", port=8000)
